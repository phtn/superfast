import { useState, useCallback, useMemo } from "react";
import * as ExpoCrypto from "expo-crypto";

/**
 * Custom hook that provides functionality to convert UUIDs to six-letter codes and vice versa
 * @returns Object containing functions for UUID-code conversion
 */
interface CodeConverter {
  uuidToCode: (uuid: string) => string;
  codeToUuid: (code: string) => string | null;
  register: (uuid: string) => string;
  getAllMappings: () => Map<string, string>;
  clearMappings: () => void;
  gsec: (length?: number) => Promise<string>;
}
export const useCodeConverter = (): CodeConverter => {
  // Store the mapping between codes and UUIDs
  const [codeToUuidMapping, setCodeToUuidMapping] = useState<
    Map<string, string>
  >(new Map());

  /**
   * Converts a UUID string to a six-letter uppercase code (non-reversible)
   * @param uuid - The UUID string to convert
   * @returns A six-letter uppercase code
   */
  const uuidToCode = useCallback((uuid: string): string => {
    // Remove any hyphens from the UUID
    const cleanUuid: string = uuid.replace(/-/g, "");

    // Convert the UUID to a numeric value (using part of it)
    // We'll take the first 8 characters and convert to a base-36 number
    const numericValue: number = parseInt(cleanUuid.substring(0, 8), 16);

    // Generate a base-36 string (0-9, a-z)
    let baseCode: string = numericValue.toString(36);

    // Ensure we have at least 6 characters
    while (baseCode.length < 6) {
      baseCode = "0" + baseCode;
    }

    // Take only the first 6 characters and convert to uppercase
    return baseCode.substring(0, 6).toUpperCase();
  }, []);

  /**
   * Creates a deterministic hash from a UUID for reversible code generation
   * @param uuid - The UUID string to hash
   * @returns A six-letter code based on UUID hash
   */
  const hashUuid = useCallback((uuid: string): string => {
    // Remove any hyphens from the UUID and ensure it's valid
    const cleanUuid: string = uuid.replace(/-/g, "");
    if (!/^[0-9a-f]{32}$/i.test(cleanUuid)) {
      throw new Error("Invalid UUID format");
    }

    // Create a hash of the UUID using a simple algorithm
    let hash: number = 0;
    for (let i = 0; i < cleanUuid.length; i++) {
      // Use char code and position to create a more unique hash
      hash = (hash << 5) - hash + cleanUuid.charCodeAt(i);
      hash = hash & hash; // Convert to 32-bit integer
    }

    // Make hash positive
    hash = Math.abs(hash);

    // Convert to base-36 (0-9, a-z) representation
    let code: string = hash.toString(36);

    // Ensure exactly 6 characters (pad or truncate)
    if (code.length > 6) {
      code = code.substring(0, 6);
    } else {
      while (code.length < 6) {
        code = "0" + code;
      }
    }

    return code.toUpperCase();
  }, []);

  /**
   * Registers a UUID with its code for later retrieval
   * @param uuid - The original UUID to register
   * @returns The six-letter code
   */
  const register = useCallback(
    (uuid: string): string => {
      const code: string = hashUuid(uuid);
      setCodeToUuidMapping((prevMapping) => {
        const newMapping = new Map(prevMapping);
        newMapping.set(code, uuid);
        return newMapping;
      });
      return code;
    },
    [hashUuid],
  );

  /**
   * Converts a six-letter code back to the original UUID
   * @param code - The six-letter code generated by register
   * @returns The original UUID or null if not found
   */
  const codeToUuid = useCallback(
    (code: string): string | null => {
      const upperCode: string = code.toUpperCase();
      return codeToUuidMapping.get(upperCode) || null;
    },
    [codeToUuidMapping],
  );

  /**
   * Returns all code-to-UUID mappings
   * @returns Map of codes to UUIDs
   */
  const getAllMappings = useCallback((): Map<string, string> => {
    return new Map(codeToUuidMapping);
  }, [codeToUuidMapping]);

  /**
   * Clears all code-to-UUID mappings
   */
  const clearMappings = useCallback((): void => {
    setCodeToUuidMapping(new Map());
  }, []);

  /**
   * Generates secure string
   */
  const gsec = useCallback(async (length: number = 28) => {
    const chars: string =
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
    // Generate random values using expo-crypto
    const values: Uint8Array = await ExpoCrypto.getRandomBytesAsync(length);

    let result: string = "";
    for (let i: number = 0; i < length; i++) {
      result += chars[values[i] % chars.length];
    }

    return result;
  }, []);

  // Return all functions memoized to prevent unnecessary re-renders
  return useMemo(
    () => ({
      uuidToCode,
      codeToUuid,
      register,
      getAllMappings,
      clearMappings,
      gsec,
    }),
    [uuidToCode, codeToUuid, register, getAllMappings, clearMappings, gsec],
  );
};

// Example usage:
//
// function MyComponent() {
//   const { uuidToCode, codeToUuid, register } = useUuidCodeConverter();
//   const uuid = "550e8400-e29b-41d4-a716-446655440000";
//
//   // Non-reversible conversion
//   const simpleCode = uuidToCode(uuid);
//
//   // Reversible conversion
//   const reversibleCode = register(uuid);
//   const originalUuid = codeToUuid(reversibleCode);
//
//   return (
//     <div>
//       <p>UUID: {uuid}</p>
//       <p>Simple Code: {simpleCode}</p>
//       <p>Reversible Code: {reversibleCode}</p>
//       <p>Retrieved UUID: {originalUuid}</p>
//     </div>
//   );
// }
